# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost If the code
# is regenerated.
# ----------------------------------------------------------------------------------

Param(
    [String]
    $StaticAnalysisOutputDirectory='artifacts/StaticAnalysisResults'
)

$ArtifactPipelineInfoFolder = (Get-Content "$PSScriptRoot/../../.ci-config.json" | ConvertFrom-Json).artifactPipelineInfoFolder

#Region Breaking Change
$BreakingChangeIssuePath = "$StaticAnalysisOutputDirectory/BreakingChangeIssues.csv"
If (Test-Path -Path $BreakingChangeIssuePath)
{
    $Issues = Get-Content -Path $BreakingChangeIssuePath | ConvertFrom-Csv
    $BreakingChangeIssueArray = @()
    ForEach ($Record In $Issues)
    {
        If ($Record.Severity -Lt 2)
        {
            $Severity = "Error"
        }
        Else
        {
            $Severity = "Warning"
        }
        $BreakingChangeIssueArray += @{
            Severity = $Severity;
            Module = $Record.AssemblyFileName;
            Target = $Record.Target;
            Description = $Record.Description;
            Remediation = $Record.Remediation;
        }
    }
    If ($BreakingChangeIssueArray.Length -Ne 0)
    {
        $BreakingChangeIssueArray | ConvertTo-Json -Depth 5 | Out-File "$ArtifactPipelineInfoFolder/StaticAnalysisBreakingChange.json"
    }
}
#EndRegion


#Region Help
$HelpIssuePath = "$StaticAnalysisOutputDirectory/HelpIssues.csv"
If (Test-Path -Path $HelpIssuePath)
{
    $Issues = Get-Content -Path $HelpIssuePath | ConvertFrom-Csv
    $HelpIssueArray = @()
    ForEach ($Record In $Issues)
    {
        If ($Record.Severity -Lt 2)
        {
            $Severity = "Error"
        }
        Else
        {
            $Severity = "Warning"
        }
        $HelpIssueArray += @{
            Severity = $Severity;
            Module = $Record.Assembly;
            Target = $Record.Target;
            Description = $Record.Description;
            Remediation = $Record.Remediation;
        }
    }
    If ($HelpIssueArray.Length -Ne 0)
    {
        $HelpIssueArray | ConvertTo-Json -Depth 5 | Out-File "$ArtifactPipelineInfoFolder/StaticAnalysisHelp.json"
    }
}
#EndRegion


#Region Example
$ExampleIssuePath = "$StaticAnalysisOutputDirectory/ExampleIssues.csv"
If (Test-Path -Path $ExampleIssuePath)
{
    $Issues = Get-Content -Path $ExampleIssuePath | ConvertFrom-Csv
    $ExampleIssueArray = @()
    ForEach ($Record In $Issues)
    {
        If ($Record.Severity -Lt 2)
        {
            $Severity = "Error"
        }
        Else
        {
            $Severity = "Warning"
        }
        $ExampleIssueArray += @{
            Severity = $Severity;
            Module = $Record.Module;
            Cmdlet = $Record.Cmdlet;
            Example = $Record.Example;
            Line = $Record.Line;
            RuleName = $Record.RuleName;
            Description = $Record.Description;
            Extent = $Record.Extent;
            Remediation = $Record.Remediation;
        }
    }
    If ($ExampleIssueArray.Length -Ne 0)
    {
        $ExampleIssueArray | ConvertTo-Json -Depth 5 | Out-File "$ArtifactPipelineInfoFolder/StaticAnalysisExample.json"
    }
}
#EndRegion


#Region Signature
$SignatureIssuePath = "$StaticAnalysisOutputDirectory/SignatureIssues.csv"
If (Test-Path -Path $SignatureIssuePath)
{
    $Issues = Get-Content -Path $SignatureIssuePath | ConvertFrom-Csv
    $SignatureIssueArray = @()
    ForEach ($Record In $Issues)
    {
        If ($Record.Severity -Lt 2)
        {
            $Severity = "Error"
        }
        Else
        {
            $Severity = "Warning"
        }
        $SignatureIssueArray += @{
            Severity = $Severity;
            Module = $Record.AssemblyFileName;
            Target = $Record.Target;
            Description = $Record.Description;
            Remediation = $Record.Remediation;
        }
    }
    If ($SignatureIssueArray.Length -Ne 0)
    {
        $SignatureIssueArray | ConvertTo-Json -Depth 5 | Out-File "$ArtifactPipelineInfoFolder/StaticAnalysisSignature.json"
    }
}
#EndRegion